{"ast":null,"code":"import { combineReducers, createStore } from \"redux\";\nfunction countReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    count: 0,\n    darkMode: false\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"increase\":\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    case \"decrease\":\n      return {\n        ...state,\n        count: state.count - 1\n      };\n    case \"reset\":\n      return {\n        ...state,\n        count: 0\n      };\n    case \"toggle\":\n      return {\n        ...state,\n        darkMode: !state.darkMode\n      };\n    default:\n      return state;\n  }\n}\nfunction inputReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    inputText: \"Hello\"\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"change\":\n      return {\n        ...state,\n        inputText: action.payload\n      };\n    default:\n      return state;\n  }\n}\nconst rootReducer = combineReducers({\n  count: countReducer,\n  inputText: inputReducer\n});\nexport const store = createStore(rootReducer);","map":{"version":3,"names":["combineReducers","createStore","countReducer","state","arguments","length","undefined","count","darkMode","action","type","inputReducer","inputText","payload","rootReducer","store"],"sources":["/Users/ranjit/WA/Projects/redux/src/ReduxStore.js"],"sourcesContent":["import { combineReducers, createStore } from \"redux\";\n\nfunction countReducer(state = { count: 0, darkMode: false }, action) {\n  switch (action.type) {\n    case \"increase\":\n      return { ...state, count: state.count + 1 };\n    case \"decrease\":\n      return { ...state, count: state.count - 1 };\n    case \"reset\":\n      return { ...state, count: 0 };\n    case \"toggle\":\n      return { ...state, darkMode: !state.darkMode };\n    default:\n      return state;\n  }\n}\nfunction inputReducer(state = { inputText: \"Hello\" }, action) {\n  switch (action.type) {\n    case \"change\":\n      return { ...state, inputText: action.payload };\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  count: countReducer,\n  inputText: inputReducer,\n});\n\nexport const store = createStore(rootReducer);\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,WAAW,QAAQ,OAAO;AAEpD,SAASC,YAAYA,CAAA,EAAgD;EAAA,IAA/CC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;IAAEG,KAAK,EAAE,CAAC;IAAEC,QAAQ,EAAE;EAAM,CAAC;EAAA,IAAEC,MAAM,GAAAL,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACjE,QAAQG,MAAM,CAACC,IAAI;IACjB,KAAK,UAAU;MACb,OAAO;QAAE,GAAGP,KAAK;QAAEI,KAAK,EAAEJ,KAAK,CAACI,KAAK,GAAG;MAAE,CAAC;IAC7C,KAAK,UAAU;MACb,OAAO;QAAE,GAAGJ,KAAK;QAAEI,KAAK,EAAEJ,KAAK,CAACI,KAAK,GAAG;MAAE,CAAC;IAC7C,KAAK,OAAO;MACV,OAAO;QAAE,GAAGJ,KAAK;QAAEI,KAAK,EAAE;MAAE,CAAC;IAC/B,KAAK,QAAQ;MACX,OAAO;QAAE,GAAGJ,KAAK;QAAEK,QAAQ,EAAE,CAACL,KAAK,CAACK;MAAS,CAAC;IAChD;MACE,OAAOL,KAAK;EAAC;AAEnB;AACA,SAASQ,YAAYA,CAAA,EAAyC;EAAA,IAAxCR,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;IAAEQ,SAAS,EAAE;EAAQ,CAAC;EAAA,IAAEH,MAAM,GAAAL,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC1D,QAAQG,MAAM,CAACC,IAAI;IACjB,KAAK,QAAQ;MACX,OAAO;QAAE,GAAGP,KAAK;QAAES,SAAS,EAAEH,MAAM,CAACI;MAAQ,CAAC;IAChD;MACE,OAAOV,KAAK;EAAC;AAEnB;AAEA,MAAMW,WAAW,GAAGd,eAAe,CAAC;EAClCO,KAAK,EAAEL,YAAY;EACnBU,SAAS,EAAED;AACb,CAAC,CAAC;AAEF,OAAO,MAAMI,KAAK,GAAGd,WAAW,CAACa,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}